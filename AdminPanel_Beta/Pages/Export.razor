@page "/Export"
@using AdminPanel_Beta.Models
@using Microsoft.EntityFrameworkCore
@using System.Text
@inject Facade facade
@inject IJSRuntime JSRuntime
@attribute [Authorize]


@if (!string.IsNullOrEmpty(message))
{
    <div class="m-5 row">
        <div class="alert alert-danger" role="alert">
            @message
        </div>
    </div>
}

<PageTitle>Export Data</PageTitle>


<div class="col-12">
    <h3 class="primary_text float-start">Export Data</h3>

</div>

<br/>
<br/>

<div class="row">
    <div class="col-3"></div>
    <div class="col-6">

        <label class="primary_text fw-bold">Keyword</label><br/>
        <input @bind="Keyword" class="form-control m-3"/> <br/>
        <label class="primary_text fw-bold">Subjects</label><br/>
        <select @bind="subjectId" class="form-control m-3">
            <option value="-1">All Subjects</option>
            @foreach (var item in subjects)
            {
                <option value="@item.Id">@item.Title</option>
            }
        </select>
        <button class="btn btn-primary float-end" @onclick="onClick">Export</button>

    </div>
    <div class="col-3"></div>
</div>

<br/>
<br/>
<br/>


@code {
    private string Keyword = "";
    private string message = null;
    private List<Subject> subjects;
    private int subjectId = -1;

    protected override Task OnInitializedAsync()
    {
        subjects = facade.context.Subjects.ToList();
        return base.OnInitializedAsync();
    }

    async Task onClick()
    {
        var assessments = facade.context.Assessments
            .Include(s=>s.Subject)
            .Include(s=>s.User)
            .Include(s=>s.AssessmentResultGroup)
            .Include(s=>s.UserOptionAnswers)
            .ThenInclude(s=>s.Options)
            .Include(s=>s.AssessmentUserResults)
            .ThenInclude(s=>s.AssessmentResultGroup)
            .Where(s=>
                (Keyword == null || s.User.Email.Contains(Keyword) || s.User.Phone.Contains(Keyword))
                && (subjectId ==-1 || s.SubjectId == subjectId)
                )
            .Select(s => new
            {
                s.Code,
                SubjectTitle = s.Subject.Title,
                UserFullname = s.User == null ? "" : s.User.Firstname + " " + s.User.Lastname,
                UserEmail = s.User == null ? "" : s.User.Email,
                UserPhone = s.User == null ? "" : s.User.Phone,
                s.Course,
                s.SubmitDateTime,
                MainResultGroup = s.AssessmentResultGroup == null ? null : s.AssessmentResultGroup.Title,
                MainResultGroupId = s.AssessmentResultGroup == null ? 0 : s.AssessmentResultGroup.Id,
                Options = s.UserOptionAnswers.Select(a=> new
                {
                    a.OptionsId,
                    a.Options.Body,
                    QuestionBody = a.Options.CurrentQuestion.Body,
                    QuestionCode = a.Options.CurrentQuestion.Code,
                    QuestionId = a.Options.CurrentQuestion.Id
                }).ToList(),
                Results = s.AssessmentUserResults.Select(a=> new
                {
                    a.Score,
                    a.AssessmentResultGroupId,
                    ResultTitle = a.AssessmentResultGroup.Title
                }).ToList()
            }).ToList();

        StringBuilder stringBuilderResults = new StringBuilder();
        StringBuilder stringBuilderOptions = new StringBuilder();

        if (!assessments.Any())
        {
            message = "No record has been founded.";
            return;
        }
        message = null;

        var firstItem = assessments.First();

        string line = "";
        string optionLine = "";
        
        foreach (var item in firstItem.GetType().GetProperties())
        {
            if (item.Name.Equals("Results"))
            {
                continue;
            }
            if (item.Name.Equals("Options"))
            {
                continue;
            }
            line += item.Name + ",";
            optionLine += item.Name + ",";
        }
        line += "Score, AssessmentResultGroupId, ResultTitle";
        optionLine += "QuestionId,QuestionCode,QuestionBody,OptionId, Body";
        
        stringBuilderResults.AppendLine(line);
        stringBuilderOptions.AppendLine(optionLine);



        foreach (var item in assessments)
        {
            
            foreach (var option in item.Options)
            {
                optionLine = "";

                optionLine +=  $"{item.Code},{item.SubjectTitle},{item.UserFullname},{item.UserEmail},{item.UserPhone}," +
                               $"{item.Course},{item.SubmitDateTime},{item.MainResultGroup},{item.MainResultGroupId},";
                optionLine += $"{option.QuestionId},{option.QuestionCode},{option.QuestionBody},{option.OptionsId},{option.Body}";
                stringBuilderOptions.AppendLine(optionLine);

            }

            foreach (var result in item.Results)
            {
                line = "";

                line += $"{item.Code},{item.SubjectTitle},{item.UserFullname},{item.UserEmail},{item.UserPhone}," +
                        $"{item.Course},{item.SubmitDateTime},{item.MainResultGroup},{item.MainResultGroupId},";
                
                line += $"{result.Score},{result.AssessmentResultGroupId},{result.ResultTitle}";
                stringBuilderResults.AppendLine(line);
            }
        }
        
        
        byte[] file = System.Text.Encoding.UTF8.GetBytes(stringBuilderResults.ToString());
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "answers.csv", "text/plain", file);
        
        byte[] file2 = System.Text.Encoding.UTF8.GetBytes(stringBuilderOptions.ToString());
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "options.csv", "text/plain", file2);
    }
}
